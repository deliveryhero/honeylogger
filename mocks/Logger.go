// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	ddtrace "gopkg.in/DataDog/dd-trace-go.v1/ddtrace"

	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Error provides a mock function with given fields: keysAndValues
func (_m *Logger) Error(keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// ErrorContext provides a mock function with given fields: ctx, msg, keysAndValues
func (_m *Logger) ErrorContext(ctx context.Context, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// ErrorSpan provides a mock function with given fields: msg, err, span, keysAndValues
func (_m *Logger) ErrorSpan(msg string, err error, span ddtrace.Span, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg, err, span)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: format, keysAndValues
func (_m *Logger) Errorf(format string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: keysAndValues
func (_m *Logger) Fatal(keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Fatalf provides a mock function with given fields: format, keysAndValues
func (_m *Logger) Fatalf(format string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// FinishSpan provides a mock function with given fields: op, sp, keysAndValues
func (_m *Logger) FinishSpan(op string, sp ddtrace.Span, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, op, sp)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// FinishSpanWithError provides a mock function with given fields: op, sp, err, keysAndValues
func (_m *Logger) FinishSpanWithError(op string, sp ddtrace.Span, err error, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, op, sp, err)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// FinishSpanWithIncrement provides a mock function with given fields: op, sp, keysAndValues
func (_m *Logger) FinishSpanWithIncrement(op string, sp ddtrace.Span, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, op, sp)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: keysAndValues
func (_m *Logger) Info(keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// InfoContext provides a mock function with given fields: ctx, msg, keysAndValues
func (_m *Logger) InfoContext(ctx context.Context, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// InfoSpan provides a mock function with given fields: msg, span, keysAndValues
func (_m *Logger) InfoSpan(msg string, span ddtrace.Span, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg, span)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: format, keysAndValues
func (_m *Logger) Infof(format string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// Sync provides a mock function with given fields:
func (_m *Logger) Sync() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WarnContext provides a mock function with given fields: ctx, msg, keysAndValues
func (_m *Logger) WarnContext(ctx context.Context, msg string, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

// WarnSpan provides a mock function with given fields: msg, err, span, keysAndValues
func (_m *Logger) WarnSpan(msg string, err error, span ddtrace.Span, keysAndValues ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg, err, span)
	_ca = append(_ca, keysAndValues...)
	_m.Called(_ca...)
}

type NewLoggerT interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogger(t NewLoggerT) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
